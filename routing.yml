# This file defines user-definable routes for the frontend of your Bolt website.
# Check below for examples, or read the documentation at
# https://docs.bolt.cm/templates/templates-routes#routing

# ------------------------------------------------------------------------------
# Place your own routes here, that have a HIGHER priority than the default routes.

sitemapxml:
  path: /sitemap.xml
  defaults: { _controller: 'Bolt\Extension\Bolt\Sitemap\Extension::sitemapXml' }

sitemap:
  path: /sitemap
  defaults: { _controller: 'Bolt\Extension\Bolt\Sitemap\Extension::sitemap' }

aboutpage:
    path: /about
    defaults:
        _controller: controller.frontend:template
        template: about

whatsonpage:
    path: /whats-on
    defaults:
        _controller: controller.frontend:template
        template: whatson

newspage:
    path: /news
    defaults:
        _controller: controller.frontend:template
        template: news

aboutbuildings:
    path: /about/buildings
    defaults:
        _controller: controller.frontend:template
        template: buildings

aboutpeoplepage:
    path: /about/people
    defaults:
        _controller: controller.frontend:template
        template: people

whatsonservicespage:
    path: /whats-on/services
    defaults:
        _controller: controller.frontend:template
        template: services

whatsonactivitiespage:
    path: /whats-on/activities
    defaults:
        _controller: controller.frontend:template
        template: activities

whatsoneventspage:
    path: /whats-on/events
    defaults:
        _controller: controller.frontend:template
        template: events

aboutbuildingsrecord:
    path: /about/buildings/{slug}
    defaults:
        _controller: controller.frontend:record
        contenttypeslug: buildings
    contenttype: buildings

aboutbuildingsrecordsingular:
    path: /about/building/{slug}
    defaults:
        _controller: controller.frontend:record
        contenttypeslug: buildings
    contenttype: buildings

aboutpeoplerecord:
    path: /about/people/{slug}
    defaults:
        _controller: controller.frontend:record
        contenttypeslug: people
    contenttype: people

aboutpeoplerecordsingular:
    path: /about/person/{slug}
    defaults:
        _controller: controller.frontend:record
        contenttypeslug: people
    contenttype: people

whatsonservicesrecord:
    path: /whats-on/services/{slug}
    defaults:
        _controller: controller.frontend:record
        contenttypeslug: services
    contenttype: services

whatsonservicesrecordsingular:
    path: /whats-on/service/{slug}
    defaults:
        _controller: controller.frontend:record
        contenttypeslug: services
    contenttype: services

whatsonactivitiesrecord:
    path: /whats-on/activities/{slug}
    defaults:
        _controller: controller.frontend:record
        contenttypeslug: activities
    contenttype: activities

whatsonactivitiesrecordsingular:
    path: /whats-on/activity/{slug}
    defaults:
        _controller: controller.frontend:record
        contenttypeslug: activites
    contenttype: activities

whatsoneventsrecord:
    path: /whats-on/events/{slug}
    defaults:
        _controller: controller.frontend:record
        contenttypeslug: events
    contenttype: events

whatsoneventsrecordsingular:
    path: /whats-on/event/{slug}
    defaults:
        _controller: controller.frontend:record
        contenttypeslug: events
    contenttype: events

category:
    path: /{groups}/{slug}
    defaults:
        _controller: controller.frontend:record
        contenttypeslug: pages
        groups: none
    requirements:
        groups: [ controller.requirement:singleTaxonomy, [groups] ]
    contenttype: pages

page:
    path: /{slug}
    defaults:
        _controller: controller.frontend:record
        contenttypeslug: page
    contenttype: pages


# ------------------------------------------------------------------------------
# These are the routes defining the default behaviour of Bolt's frontend.
# Changing these might give unexpected results or even break your website. If
# possible, only add NEW routes above or below these.

homepage:
    path: /
    defaults:
        _controller: controller.frontend:homepage

search:
    path: /search
    defaults:
        _controller: controller.frontend:search

preview:
    path: /preview/{contenttypeslug}
    defaults:
        _controller: controller.frontend:preview
    requirements:
        contenttypeslug: controller.requirement:anyContentType

contentlink:
    path: /{contenttypeslug}/{slug}
    defaults:
        _controller: controller.frontend:record
    requirements:
        contenttypeslug: controller.requirement:anyContentType

taxonomylink:
    path: /{taxonomytype}/{slug}
    defaults:
        _controller: controller.frontend:taxonomy
    requirements:
        taxonomytype: controller.requirement:anyTaxonomyType

contentlisting:
    path: /{contenttypeslug}
    defaults:
        _controller: controller.frontend:listing
    requirements:
        contenttypeslug: controller.requirement:pluralContentTypes

# ------------------------------------------------------------------------------
# Place your own routes here, that have a LOWER priority than the default routes.


page:
    path: /special-events/{slug}
    defaults:
        _controller: controller.frontend:record
        contenttypeslug: events
    contenttype: events


# ------------------------------------------------------------------------------
# Routes examples:

# Example to route old '.html' pages to pages genereated by bolt.

# oldpages:
#     path: /{slug}.html
#     defaults:
#         _controller: controller.frontend:record
#         contenttypeslug: page
#     requirements:
#         slug: [a-z0-9-_]+


# Example route with a host requirement

# example:
#     path: /example
#     defaults:
#         _controller: controller.frontend:record
#         contenttypeslug: page
#         slug: example
#     host: www.mydomain.org


# Example override for a specific contenttype

# pagebinding:
#     path: /{slug}
#     defaults:
#         _controller: controller.frontend:record
#         contenttypeslug: page
#     contenttype: pages



# Example single record override

# aboutbinding:
#     path: /about
#     defaults:
#         _controller: controller.frontend:record
#         contenttypeslug: page
#         slug: about
#     recordslug: page/about



# Example: Use the following to add a route for contenttypes in your URL scheme. In this example we
# add routing for the 'chapter' taxonomy, so we can link to /meta/lorum-ipsum or /main/foo-bar.
# note that the 'showcase' in the defaults and requirements determine the fallback, for when
# no option is specified in a specifid record. Basically, this makes the route respond to the
# default route /showcase/foo-bar as well.

# chapterbinding:
#     path: /{chapters}/{slug}
#     defaults:
#         _controller: controller.frontend:record
#         contenttypeslug: showcases
#         chapters: showcase
#     requirements:
#         chapters: [ controller.requirement:singleTaxonomy, [chapters, showcase] ]
#     contenttype: showcases

# categorybinding:
#     path: /{categories}/{slug}
#     defaults:
#         _controller: controller.frontend:record
#         contenttypeslug: showcases
#         categories: none
#     requirements:
#         categories: [ controller.requirement:singleTaxonomy, [categories] ]
#     contenttype: showcases


# Supported internal defaults are:
#  _controller   the controller class::method to be called
#  _before       the before to call, if non-existent the 'before()' of the controller will be called
#  _after        the after to call, if non-existent the 'after()' of the controller will be called
#
# Both _before and _after support a shortcut notation which re-uses the controller class: '::before'


# Example: rendering a "static" template from the current theme with no associated record/content.
# Note that you can still load and render content from within the template.

# templatebinding:
#     path: /static-page
#     defaults:
#         _controller: controller.frontend:template
#         template: static-page
